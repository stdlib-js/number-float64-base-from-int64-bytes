{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar IS_LITTLE_ENDIAN = require( '@stdlib/assert-is-little-endian' );\nvar Uint8Array = require( '@stdlib/array-uint8' );\nvar DataView = require( '@stdlib/array-dataview' );\n\n\n// VARIABLES //\n\n// 2**32\nvar TWO_32 = 4294967296;\n\n// Initialize a workspace:\nvar WORKSPACE = new Uint8Array( 8 );\n\n\n// MAIN //\n\n/**\n* Converts a signed 64-bit integer byte array to a double-precision floating-point number.\n*\n* ## Notes\n*\n* -   The function assumes host byte order (endianness).\n*\n* @param {Uint8Array} bytes - byte array\n* @param {integer} stride - stride\n* @param {NonNegativeInteger} offset - index offset\n* @returns {number} double-precision floating-point number\n*\n* @example\n* var Uint8Array = require( '@stdlib/array-uint8' );\n*\n* var bytes = new Uint8Array( [ 255, 255, 255, 255, 255, 255, 255, 255 ] );\n* var x = fromInt64Bytes( bytes, 1, 0 );\n* // returns -1.0\n*/\nfunction fromInt64Bytes( bytes, stride, offset ) {\n\tvar view;\n\tvar hi;\n\tvar lo;\n\tvar b;\n\tvar i;\n\n\tif ( stride === 1 ) { // contiguous\n\t\tb = bytes;\n\t} else { // non-contiguous\n\t\tb = WORKSPACE;\n\t\tfor ( i = 0; i < 8; i++ ) {\n\t\t\tb[ i ] = bytes[ offset ];\n\t\t\toffset += stride;\n\t\t}\n\t\toffset = 0;\n\t}\n\tview = new DataView( b.buffer, b.byteOffset, b.byteLength );\n\tif ( IS_LITTLE_ENDIAN ) {\n\t\tlo = view.getInt32( offset, IS_LITTLE_ENDIAN );\n\t\thi = view.getInt32( offset+4, IS_LITTLE_ENDIAN );\n\t} else {\n\t\thi = view.getInt32( offset, IS_LITTLE_ENDIAN );\n\t\tlo = view.getInt32( offset+4, IS_LITTLE_ENDIAN );\n\t}\n\tif ( lo < 0 ) {\n\t\tlo += TWO_32;\n\t}\n\treturn ( hi*TWO_32 ) + lo;\n}\n\n\n// EXPORTS //\n\nmodule.exports = fromInt64Bytes;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert a signed 64-bit integer byte array to a double-precision floating-point number.\n*\n* @module @stdlib/number-float64-base-from-int64-bytes\n*\n* @example\n* var Uint8Array = require( '@stdlib/array-uint8' );\n* var fromInt64Bytes = require( '@stdlib/number-float64-base-from-int64-bytes' );\n*\n* var bytes = new Uint8Array( [ 255, 255, 255, 255, 255, 255, 255, 255 ] );\n* var x = fromInt64ByteArray( bytes, 1, 0 );\n* // returns -1.0\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAmB,QAAS,iCAAkC,EAC9DC,EAAa,QAAS,qBAAsB,EAC5CC,EAAW,QAAS,wBAAyB,EAM7CC,EAAS,WAGTC,EAAY,IAAIH,EAAY,CAAE,EAwBlC,SAASI,EAAgBC,EAAOC,EAAQC,EAAS,CAChD,IAAIC,EACAC,EACAC,EACAC,EACAC,EAEJ,GAAKN,IAAW,EACfK,EAAIN,MACE,CAEN,IADAM,EAAIR,EACES,EAAI,EAAGA,EAAI,EAAGA,IACnBD,EAAGC,CAAE,EAAIP,EAAOE,CAAO,EACvBA,GAAUD,EAEXC,EAAS,CACV,CACA,OAAAC,EAAO,IAAIP,EAAUU,EAAE,OAAQA,EAAE,WAAYA,EAAE,UAAW,EACrDZ,GACJW,EAAKF,EAAK,SAAUD,EAAQR,CAAiB,EAC7CU,EAAKD,EAAK,SAAUD,EAAO,EAAGR,CAAiB,IAE/CU,EAAKD,EAAK,SAAUD,EAAQR,CAAiB,EAC7CW,EAAKF,EAAK,SAAUD,EAAO,EAAGR,CAAiB,GAE3CW,EAAK,IACTA,GAAMR,GAEEO,EAAGP,EAAWQ,CACxB,CAKAZ,EAAO,QAAUM,ICvDjB,IAAIS,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "IS_LITTLE_ENDIAN", "Uint8Array", "DataView", "TWO_32", "WORKSPACE", "fromInt64Bytes", "bytes", "stride", "offset", "view", "hi", "lo", "b", "i", "main"]
}
